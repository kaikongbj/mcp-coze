name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Extract version from tag or input
      id: version
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi

    - name: Update Cargo.toml version
      shell: bash
      run: |
        VERSION=${{ steps.version.outputs.version }}
        sed -i.bak "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml
        rm Cargo.toml.bak || true

    - name: Update version in main.rs
      shell: bash
      run: |
        VERSION=${{ steps.version.outputs.version }}
        sed -i.bak "s/version: \".*\"/version: \"$VERSION\"/" src/main.rs
        rm src/main.rs.bak || true

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create package name
      id: package
      shell: bash
      run: |
        VERSION=${{ steps.version.outputs.version }}
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          echo "name=coze-mcp-server-v$VERSION-${{ matrix.name }}.exe" >> $GITHUB_OUTPUT
          echo "path=target/${{ matrix.target }}/release/coze-mcp-server.exe" >> $GITHUB_OUTPUT
        else
          echo "name=coze-mcp-server-v$VERSION-${{ matrix.name }}" >> $GITHUB_OUTPUT
          echo "path=target/${{ matrix.target }}/release/coze-mcp-server" >> $GITHUB_OUTPUT
        fi

    - name: Copy and rename binary
      shell: bash
      run: |
        mkdir -p artifacts
        cp "${{ steps.package.outputs.path }}" "artifacts/${{ steps.package.outputs.name }}"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.package.outputs.name }}
        path: artifacts/${{ steps.package.outputs.name }}

  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --verbose

  release:
    name: Create Release
    needs: [build, test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version
      id: version
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "tag=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Generate changelog
      id: changelog
      shell: bash
      run: |
        VERSION=${{ steps.version.outputs.version }}
        echo "## Changes in v$VERSION" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### Features" >> RELEASE_NOTES.md
        echo "- Built with Rust stable toolchain" >> RELEASE_NOTES.md
        echo "- Cross-platform support (Linux, Windows, macOS)" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### Supported Platforms" >> RELEASE_NOTES.md
        echo "- Linux x86_64" >> RELEASE_NOTES.md
        echo "- Windows x86_64" >> RELEASE_NOTES.md
        echo "- macOS x86_64" >> RELEASE_NOTES.md
        echo "- macOS ARM64" >> RELEASE_NOTES.md

    - name: Create Release (for workflow_dispatch)
      if: github.event_name == 'workflow_dispatch'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: Release ${{ steps.version.outputs.tag }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false

    - name: Create or Update Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Release ${{ steps.version.outputs.tag }}
        body_path: RELEASE_NOTES.md
        files: |
          artifacts/*/coze-mcp-server-*
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
